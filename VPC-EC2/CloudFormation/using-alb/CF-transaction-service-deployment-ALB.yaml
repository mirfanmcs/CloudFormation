AWSTemplateFormatVersion: '2010-09-09'
Description:  Create VPC and deploy microservice on EC2 instance. Use Autoscaling and Application Elastic Load Balancer to make microservice highly available. Make microservice publicly available. Application Load Balancer requires atleast two Subnets in two different Availavility Zones.
Parameters:
  CidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 192.168.0.0/16
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String
    
  PublicSubnet1CIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 192.168.1.0/24
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String

  PublicSubnet2CIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 192.168.2.0/24
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String

  PublicAvailabilityZone1:
    Description: AvailabilityZone for public subnet 1
    Type: AWS::EC2::AvailabilityZone::Name

  PublicAvailabilityZone2:
    Description: AvailabilityZone for public subnet 2
    Type: AWS::EC2::AvailabilityZone::Name
  
  SSHLocation:
    Description: " The IP address range that can be used to SSH to the EC2 instances"
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
 
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    
Mappings:
  AWSRegionArch2AMI:
    us-east-1:  #N. Virginia
      HVM64: ami-0ff8a91507f77f867
      HVMG2: ami-0a584ac55a7631c0c
    us-west-2:  #Oregon
      HVM64: ami-a0cfeed8
      HVMG2: ami-0e09505bc235aa82d
    us-west-1:  #N. California
      HVM64: ami-0bdb828fd58c52235
      HVMG2: ami-066ee5fd4a9ef77f1
    eu-west-1:  #Ireland
      HVM64: ami-047bb4163c506cd98
      HVMG2: ami-0a7c483d527806435
    eu-west-2:  #London
      HVM64: ami-f976839e
      HVMG2: NOT_SUPPORTED
    eu-west-3:  #Paris
      HVM64: ami-0ebc281c20e89ba4b
      HVMG2: NOT_SUPPORTED
    eu-central-1:  #Frankfurt
      HVM64: ami-0233214e13e500f77
      HVMG2: ami-06223d46a6d0661c7
    ap-northeast-1:  #Tokyo
      HVM64: ami-06cd52961ce9f0d85
      HVMG2: ami-053cdd503598e4a9d
    ap-northeast-2:  #Seoul
      HVM64: ami-0a10b2721688ce9d2
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:  #Osaka-Local
      HVM64: ami-0d98120a9fb693f07
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:  #Singapore
      HVM64: ami-08569b978cc4dfa10
      HVMG2: ami-0be9df32ae9f92309
    ap-southeast-2:  #Sydney
      HVM64: ami-0c9d48b5db609ad6e  #Amazon Linux 2 AMI (HVM), SSD Volume Type 
      HVMG2: ami-0c9d48b5db609ad6e
    ap-south-1:  #Mumbai
      HVM64: ami-0912f71e06545ad88
      HVMG2: ami-097b15e89dbdcfcf4
    us-east-2:  #Ohio
      HVM64: ami-0b59bfac6be064b78
      HVMG2: NOT_SUPPORTED
    ca-central-1:  #Canada 
      HVM64: ami-0b18956f
      HVMG2: NOT_SUPPORTED
    sa-east-1:  #SÃ£o Paulo
      HVM64: ami-07b14488da8ea02a0
      HVMG2: NOT_SUPPORTED
    cn-north-1:  #Beijing
      HVM64: ami-0a4eaf6c4454eda75
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:  #Ningxia
      HVM64: ami-6b6a7d09
      HVMG2: NOT_SUPPORTED

  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: HVM64
    c1.xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64

Resources:
#====================================== VPC SETUP =====================================
# Create VPC
  MicroservicesVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Ref: CidrBlock
      Tags:
      - Key: Name
        Value: MicroservicesVPC
      - Key: StackId
        Value:
          Ref: AWS::StackId
      - Key: StackName
        Value:
          Ref: AWS::StackName

#====================================== SUBNET SETUP =====================================
# Create Public Subnet 1 inside VPC                   
  MsPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MicroservicesVPC
      CidrBlock: 
        Ref: PublicSubnet1CIDR
      AvailabilityZone: 
        Ref: PublicAvailabilityZone1
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Join:
              - '-'
              - [MsPublicSubnet1, {Ref: PublicAvailabilityZone1}]
      - Key: StackId
        Value:
          Ref: AWS::StackId
      - Key: StackName
        Value:
          Ref: AWS::StackName

# Create Public Subnet 2 inside VPC                   
  MsPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MicroservicesVPC
      CidrBlock: 
        Ref: PublicSubnet2CIDR
      AvailabilityZone: 
        Ref: PublicAvailabilityZone2
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Join:
              - '-'
              - [MsPublicSubnet2, {Ref: PublicAvailabilityZone2}]
      - Key: StackId
        Value:
          Ref: AWS::StackId
      - Key: StackName
        Value:
          Ref: AWS::StackName
#====================================== INTERNET GATEWAY SETUP ==========================
# Create Internet Gateway        
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: InternetGateway
      - Key: StackId
        Value:
          Ref: AWS::StackId
      - Key: StackName
        Value:
          Ref: AWS::StackName

# Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MicroservicesVPC
      InternetGatewayId:
        Ref: InternetGateway

#====================================== ROUTE SETUP ================================== 
# Create Route Table
  MsRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MicroservicesVPC
      Tags:
      - Key: Name
        Value: MsRouteTable
      - Key: StackId
        Value:
          Ref: AWS::StackId
      - Key: StackName
        Value:
          Ref: AWS::StackName
       
# Create route in Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway  #Wait for Intenet Gatway to attach to VPC before creating route 
    Properties:
      RouteTableId:
        Ref: MsRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

# Associate route to public subnet
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: MsPublicSubnet1
      RouteTableId:
        Ref: MsRouteTable
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: MsPublicSubnet2
      RouteTableId:
        Ref: MsRouteTable

#====================================== NETWORK ACL SETUP =========================== 
# Create Network ACL
  MsNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: MicroservicesVPC
      Tags:
      - Key: Name
        Value: MsNetworkAcl
      - Key: StackId
        Value:
          Ref: AWS::StackId
      - Key: StackName
        Value:
          Ref: AWS::StackName

# Create Inboud HTTP rule. Allow access on port 80 to anyone (0.0.0.0/0)
  InboundHTTPNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: MsNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

# Create Inboud HTTPS rule. Allow access on port 443 to anyone (0.0.0.0/0)
  InboundHTTPSNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: MsNetworkAcl
      RuleNumber: '200'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'

# Create Inboud SSH rule. Allow access on port 22 (SSH) to anyone (0.0.0.0/0)
# Note: On production you should restrict to the IP address or use Bastion Host
  InboundSSHNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: MsNetworkAcl
      RuleNumber: '300'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'

  # Create Inboud ephemeral port (1024-65535) rule for HTTP communication
  InboundEphemeralPortsNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: MsNetworkAcl
      RuleNumber: '400'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  
# Note: Network ACL is stateless that means that return traffic type must be allowed in the Outbound Rule.

# Create Outboud HTTP rule. Allow access on port 80 to anyone (0.0.0.0/0)
  OutBoundHTTPNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: MsNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

# Create Outboud HTTPS rule. Allow access on port 443 to anyone (0.0.0.0/0)
  OutBoundHTTPSNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: MsNetworkAcl
      RuleNumber: '200'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'

# Create Outboud SSH rule. Allow access on port 22 (SSH) to anyone (0.0.0.0/0)
  OutBoundSSHNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: MsNetworkAcl
      RuleNumber: '300'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  
# Create Outboud ephemeral port (1024-65535) rule for HTTP communication
  OutBoundEphemeralPortsNaclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: MsNetworkAcl
      RuleNumber: '400'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

# Associate Network ACL with Public Subnet
  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: MsPublicSubnet1
      NetworkAclId:
        Ref: MsNetworkAcl

  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: MsPublicSubnet2
      NetworkAclId:
        Ref: MsNetworkAcl
       
#====================================== SECURITY GROUP SETUP =========================== 
# Create Security Group for microservice EC2 Instance
  MsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access and SSH access
      VpcId:
        Ref: MicroservicesVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId:
          Ref: LoadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
   
#==================== CREATE IAM ROLE FOR EC2 INSTANCE TO READ S3 BUCKET ==================== 
  ReadS3BucketsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: EC2S3ReadAccess
      
  ListS3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ListS3BucketsPolicy
      PolicyDocument:
        Version: '2012-10-17'        
        Statement:
        - Effect: Allow
          Action:
          - s3:Get*
          - s3:List*
          Resource: "*"
      Roles:
      - Ref: EC2S3ReadAccess

  EC2S3ReadAccess:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

#====================================== APPLICATION LOAD BALANCER SETUP ================================ 
  MicroserviceApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      #Must be a list of at least two existing subnets associated with at least two different availability zones. 
      - Ref: MsPublicSubnet1
      - Ref: MsPublicSubnet2
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      Tags:
      - Key: Name
        Value: MicroserviceApplicationLoadBalancer
      - Key: StackId
        Value:
          Ref: AWS::StackId
      - Key: StackName
        Value:
          Ref: AWS::StackName

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: MicroserviceApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 25
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: MicroservicesVPC

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId:
        Ref: MicroservicesVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0

#====================================== AUTO SCALING GROUP SETUP =========================== 
  #Setup Auto Scaling Group
  MsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      #Must be a list of at least two existing subnets associated with at least two different availability zones. 
      - Ref: MsPublicSubnet1
      - Ref: MsPublicSubnet2
      LaunchConfigurationName:
        Ref: MsLaunchConfig
      MinSize: '1'
      MaxSize: '10'
      DesiredCapacity: '2'
      TargetGroupARNs:
      - Ref: ALBTargetGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        WaitOnResourceSignals: 'true'

# Create EC2 Instance to deploy Microservice
  MsLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: AttachGateway
    Metadata:  
      #Installing application using AWS::CloudFormation::Init. 
      #Changing the app version (transaction-1.0) in this CF script and update stack will cause new version of application to be installed without restarting or replacing EC2 instance. 
      #Note: interval setting of 1 minute in cfn-hup.conf tells deamon to detect meta data changes with 1 minute interval and perform updates on EC2 instance.  
      #Note: user data is immutable. 
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/systemd/system/transaction.service":
              content:
                !Sub |
                  [Unit]
                  Description=Manage Java service

                  [Service]
                  ExecStart=/bin/java -jar /opt/transaction-service/transaction-1.0.jar
                  Type=simple
                  Restart=always
                  RestartSec=1

                  [Install]
                  WantedBy=multi-user.target
              mode: '000400'
              owner: root
              group: root
            "/tmp/setupapp.sh":
              content:
                !Sub |
                  #!/bin/bash
                  yum install java-1.8.0 -y
                  yum remove java-1.7.0-openjdk -y
                  mkdir /opt/transaction-service
                  aws s3 cp s3://transaction-service-artefact/transaction-1.0.jar /opt/transaction-service/ --region=ap-southeast-2
                  systemctl stop transaction.service
                  systemctl daemon-reload
                  systemctl start transaction.service
                  systemctl enable transaction.service
              mode: '000500'
              owner: root
              group: root  
            "/etc/cfn/cfn-hup.conf":
              content:
                Fn::Join:
                - ''
                - - "[main]\n"
                  - stack=
                  - Ref: AWS::StackId
                  - "\n"
                  - region=
                  - Ref: AWS::Region
                  - "\n"
                  - interval=1
                  - "\n"
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                Fn::Join:
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - 'triggers=post.update

                    '
                  - 'path=Resources.MsLaunchConfig.Metadata.AWS::CloudFormation::Init

                    '
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - "         --stack "
                  - Ref: AWS::StackName
                  - "         --resource MsLaunchConfig "
                  - "         --region "
                  - Ref: AWS::Region
                  - "\n"
                  - 'runas=root

                    '
              mode: '000400'
              owner: root
              group: root
          commands:
            setup:
              command: "/tmp/setupapp.sh"
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      IamInstanceProfile:
        Ref: ReadS3BucketsInstanceProfile
      SecurityGroups:
      - Ref: MsSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - 'yum update -y aws-cfn-bootstrap

              '
            - "/opt/aws/bin/cfn-init -v "
            - "         --stack "
            - Ref: AWS::StackName
            - "         --resource MsLaunchConfig "
            - "         --region "
            - Ref: AWS::Region
            - "\n"
            - "/opt/aws/bin/cfn-signal -e $? "
            - "         --stack "
            - Ref: AWS::StackName
            - "         --resource MsAutoScalingGroup "
            - "         --region "
            - Ref: AWS::Region
            - "\n"
            
Outputs:
  URL:
    Description: URL of the website
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - MicroserviceApplicationLoadBalancer
          - DNSName
   