AWSTemplateFormatVersion: '2010-09-09'

Description:  This template builds an AWS CodePipeline pipeline that implements a continuous delivery release  process for AWS CloudFormation stacks. Submit a CloudFormation source artifact to an Amazon S3 location before building the pipeline. The pipeline uses the artifact to automatically create stacks and change sets.
Parameters:
  PipelineName:
    Default: myFirstPipeline
    Description: A name for pipeline
    Type: String
  RepositoryName:
    Default: 'transaction'    
    Description: The name of the CodeCommit Repository that contains the source artifact
    Type: String
  BranchName:
    Default: 'master'
    Description: Source branch name in CodeCommit
    Type: String
  TemplateFileName:
    Default: CF-transaction-service-deployment-ALB.yaml
    Description: Source template file name
    Type: String
  TestStackName:
    Default: Test-transaction-stack
    Description: A name for the test stack
    Type: String
  TestStackConfig:
    Default: test-codepipeline-configuration-ALB.json
    Description: The parametre file name for the test stack
    Type: String
  ProdStackName:
    Default: Prod-transaction-stack
    Description: A name for the production stack
    Type: String
  ProdStackConfig:
    Default: prod-codepipeline-configuration-ALB.json
    Description: The parameter file name for the production stack
    Type: String
  ChangeSetName:
    Default: UpdatePreview-transaction-service
    Description: A name for the production stack change set
    Type: String
  Email:
    Description: The email address where CodePipeline sends pipeline notifications
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "CodePipeline Settings"
        Parameters:
          - PipelineName
          - RepositoryName
          - BranchName
          - Email
      - Label:
          default: "Test Stack Settings"
        Parameters:
          - TestStackName
          - TemplateFileName
          - TestStackConfig
      - Label:
          default: "Production Stack Settings"
        Parameters:
          - ChangeSetName
          - ProdStackName
          - ProdStackConfig

Mappings:
  Functions:
    AMICheck:
      S3Key: ami_check.zip
      Handler: ami_check
    ValidateTemplate:
      S3Key: validate_template.zip
      Handler: validate_template

  General:
    CIConfig:
      CITestPath: ci
    CodeRepo:
      S3BucketPrefix: solutions-
      S3KeyPrefix: aws-cloudformation-validation-pipeline/v1.0/
    SendAnonymousData:
      Enabled: 'Yes'
    AbsoluteBucketName:
      Enabled: 'No'

Conditions:
  UseRelativeBucket:
    Fn::Equals:
    - Fn::FindInMap:
      - General
      - AbsoluteBucketName
      - Enabled
    - 'No'
   
Resources:
#******************************* CREATE TEST LAMBDA FUNCTIONS ****************************************************
  AMICheckLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Join:
          - ''
          - - Fn::FindInMap:
              - General
              - CodeRepo
              - S3BucketPrefix
            - Fn::If:
              - UseRelativeBucket
              - Ref: AWS::Region
              - Ref: AWS::NoValue
        S3Key:
          Fn::Join:
          - ''
          - - Fn::FindInMap:
              - General
              - CodeRepo
              - S3KeyPrefix
            - Fn::FindInMap:
              - Functions
              - AMICheck
              - S3Key
      Description: Tests that AMI's are at their latest version
      FunctionName: AMI_Check
      Handler:
        Fn::Join:
        - "."
        - - Fn::FindInMap:
            - Functions
            - AMICheck
            - Handler
          - lambda_handler
      MemorySize: '512'
      Role:
        Fn::GetAtt:
        - AMICheckRole
        - Arn
      Runtime: python2.7
      Timeout: '300'
      Environment:
        Variables:
          SEND_ANONYMOUS_DATA:
            Fn::FindInMap:
            - General
            - SendAnonymousData
            - Enabled
  AMICheckRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AMICheckRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:logs:'
                - Ref: AWS::Region
                - ":"
                - Ref: AWS::AccountId
                - ":log-group:/aws/lambda/*"
          - Effect: Allow
            Action:
            - codepipeline:GetPipeline
            - codepipeline:GetPipelineExecution
            - codepipeline:GetPipelineState
            - codepipeline:ListPipelines
            Resource:
            - Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
            - codepipeline:GetJobDetails
            - codepipeline:PutJobSuccessResult
            - codepipeline:PutJobFailureResult
            Resource: "*"
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource: "*"
          - Effect: Allow
            Action:
            - ec2:DescribeRegions
            - ec2:DescribeImages
            Resource: "*"
  ValidateTemplateLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Join:
          - ''
          - - Fn::FindInMap:
              - General
              - CodeRepo
              - S3BucketPrefix
            - Fn::If:
              - UseRelativeBucket
              - Ref: AWS::Region
              - Ref: AWS::NoValue
        S3Key:
          Fn::Join:
          - ''
          - - Fn::FindInMap:
              - General
              - CodeRepo
              - S3KeyPrefix
            - Fn::FindInMap:
              - Functions
              - ValidateTemplate
              - S3Key
      Description: Build action to create stacks using templates, parameters and settings
        based on the defined ci config
      FunctionName: Validate_Template
      Handler:
        Fn::Join:
        - "."
        - - Fn::FindInMap:
            - Functions
            - ValidateTemplate
            - Handler
          - lambda_handler
      MemorySize: '512'
      Role:
        Fn::GetAtt:
        - ValidateTemplateRole
        - Arn
      Runtime: python2.7
      Timeout: '30'
      Environment:
        Variables:
          SEND_ANONYMOUS_DATA:
            Fn::FindInMap:
            - General
            - SendAnonymousData
            - Enabled
  ValidateTemplateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ValidateTemplateRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
            - codepipeline:GetPipeline
            - codepipeline:GetPipelineExecution
            - codepipeline:GetPipelineState
            - codepipeline:ListPipelines
            Resource:
            - Fn::Sub: arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
            - codepipeline:GetJobDetails
            - codepipeline:PutJobSuccessResult
            - codepipeline:PutJobFailureResult
            Resource: "*"
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            Resource: "*"
          - Effect: Allow
            Action:
            - cloudformation:ValidateTemplate
            Resource: "*"

  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  CodePipelineSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email

  ScratchBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private

#******************************* CREATE CODEPIPELINE ****************************************************

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref 'ArtifactStoreBucket'
        Type: S3
      DisableInboundStageTransitions: []
      Name: !Ref 'PipelineName'
      RoleArn: !GetAtt [PipelineRole, Arn]

      Stages:
        - Name: CodeCommitSource
          Actions:
            - Name: TemplateSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              Configuration:
                RepositoryName: !Ref 'RepositoryName'
                BranchName: !Ref 'BranchName'
              OutputArtifacts:
                - Name: TemplateSource
              RunOrder: '1'
        - Name: PreCreateTests
          Actions:
            - Name: Validate_Template
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: '1'
                Provider: Lambda
              InputArtifacts:
                - Name: TemplateSource
              OutputArtifacts: []
              Configuration:
                FunctionName: Validate_Template
                UserParameters:
                  Fn::Sub:
                  - '{ "StackId": "${AWS::StackId}", "CITestPath": "${CITestPath}", "ScratchBucket":
                    "${ScratchBucket}" }'
                  - CITestPath:
                      Fn::FindInMap:
                      - General
                      - CIConfig
                      - CITestPath
              RunOrder: 1
            - Name: AMI_Check
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: '1'
                Provider: Lambda
              InputArtifacts:
                - Name: TemplateSource
              OutputArtifacts: []
              Configuration:
                FunctionName: AMI_Check
                UserParameters:
                  Fn::Sub:
                  - '{ "StackId": "${AWS::StackId}", "CITestPath": "${CITestPath}", "ScratchBucket":
                    "${ScratchBucket}" }'
                  - CITestPath:
                      Fn::FindInMap:
                      - General
                      - CIConfig
                      - CITestPath
              RunOrder: 2

        - Name: TestStage
          Actions:
            - Name: CreateStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: TemplateSource
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                RoleArn: !GetAtt [CFNRole, Arn]
                Capabilities: CAPABILITY_IAM
                StackName: !Ref TestStackName
                TemplateConfiguration: !Sub "TemplateSource::${TestStackConfig}"
                TemplatePath: !Sub "TemplateSource::${TemplateFileName}"
              RunOrder: '1'
            - Name: ApproveTestStack
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration:
                NotificationArn: !Ref CodePipelineSNSTopic
                CustomData: !Sub 'Do you want to create a change set against the production stack and delete the ${TestStackName} stack?'
              RunOrder: '2'
            - Name: DeleteTestStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: DELETE_ONLY
                RoleArn: !GetAtt [CFNRole, Arn]
                StackName: !Ref TestStackName
              RunOrder: '3'
        - Name: ProdStage
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: TemplateSource
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt [CFNRole, Arn]
                Capabilities: CAPABILITY_IAM                
                StackName: !Ref ProdStackName
                ChangeSetName: !Ref ChangeSetName
                TemplateConfiguration: !Sub "TemplateSource::${ProdStackConfig}"
                TemplatePath: !Sub "TemplateSource::${TemplateFileName}"
              RunOrder: '1'
            - Name: ApproveChangeSet
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration:
                NotificationArn: !Ref CodePipelineSNSTopic
                CustomData: !Sub 'A new change set was created for the ${ProdStackName} stack. Do you want to implement the changes?'
              RunOrder: '2'
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Ref ChangeSetName
                RoleArn: !GetAtt [CFNRole, Arn]
                StackName: !Ref ProdStackName
              RunOrder: '3'
  CFNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CloudFormationRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'ec2:*'
                  - 'iam:CreateRole' 
                  - 'iam:CreateInstanceProfile'
                  - 'iam:AddRoleToInstanceProfile'
                  - 'iam:PutRolePolicy'
                  - 'iam:PassRole'
                  - 'iam:DeleteRole'
                  - 'iam:DeleteInstanceProfile'
                  - 'iam:DeleteRolePolicy'
                  - 'iam:RemoveRoleFromInstanceProfile'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                Effect: Allow
                Resource: '*'
              
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codepipeline.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 's3:*'
                - 'cloudformation:CreateStack'
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DeleteStack'
                - 'cloudformation:UpdateStack'
                - 'cloudformation:CreateChangeSet'
                - 'cloudformation:ExecuteChangeSet'
                - 'cloudformation:DeleteChangeSet'
                - 'cloudformation:DescribeChangeSet'
                - 'cloudformation:SetStackPolicy'
                - 'iam:PassRole'
                - 'sns:Publish'
                - 'codecommit:GetBranch'
                - 'codecommit:GetCommit'
                - 'codecommit:UploadArchive'
                - 'codecommit:GetUploadArchiveStatus'    
                - 'codecommit:CancelUploadArchive'
                Effect: Allow
                Resource: '*'
              - Action: lambda:ListFunctions
                Resource: "*"
                Effect: Allow
              - Action: lambda:InvokeFunction
                Resource:
                - Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AMI_Check
                - Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Validate_Template
                Effect: Allow